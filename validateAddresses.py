#!/usr/bin/python
#
# Find good addresses to jump
# Compares list of addresses against list of bad or good characters and check the first or more safe addresses
# @HackerOnTwoWheels
#
import os
import sys
import struct


#Change this as necessary
goodchars = ['0c', '0e', '0f', '01', '02', '03', '04', '05', '06', '07', '08', '09', 
'10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', 
'1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', 
'2c', '2d', '2e', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3b', 
'3c', '3d', '3e', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', 
'4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', 
'5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', 
'68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', 
'76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f']


badchars =['00', '0a', '0b', '0d', '2f', '3a', '3f', '40', '80', '81', '82', '83', 
'84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', 
'91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', 
'9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 
'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 
'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 
'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 
'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 
'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 
'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 
'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff']

def goodcheck(addrfile):
	f = open(addrfile, "r")
	currentaddr = []
	print "[*] Opening Address File [*]"
	for addr in f:
		x = 2
		y = 4
		del currentaddr[:]
		while x < 9:
			hexval = addr[x:y]
			currentaddr.append(hexval)
			x += 2
			y += 2
		print "[*] Checking if bytes in address are good characters, current address: " + addr
		goodcharcount = 0
		for currenthex in currentaddr:
			if currenthex in goodchars:
				goodcharcount += 1
		
		if goodcharcount == 4:
			print "Good address found : " + addr
			confirm = raw_input("Would you like to continue looking for more? (y/n)")
			if confirm == "n":
				return

def badcheck(addrfile):
	f = open(addrfile, "r")
	currentaddr = []
	print "[*] Opening Address File [*]"
	for addr in f:
		x = 2
		y = 4
		del currentaddr[:]
		while x < 9:
			hexval = addr[x:y]
			currentaddr.append(hexval)
			x += 2
			y += 2

		print "[*] Looking for bad characters in address: " + addr
		badcharcount = 0
		for badhex in badchars:
			if badhex in currentaddr:
				badcharcount += 1

		if badcharcount == 0:
			print "Good address found : " + addr
			confirm = raw_input("Would you like to continue looking for more? (y/n)")
			if confirm == "n":
				return
				
	print "[!] No good address found! [!]"
	f.close()
			
def createAddrFile(addrfile):
	return

#check for arguments and print usage
def main():
	if len(sys.argv) < 4 or sys.argv[1] == '-h':
		print "\n[!] Usage ./" + sys.argv[0] + " -b -f addresses.txt [!]"
		print "[!] -b to check against bad characters list. [!]"
		print "[!] -g to check against good characters list. [!]"
		print "[!] -f for file with one address per line like \"0x303943d4\" [!]"
		print "[!] -c create addresses file from mona.py output [!]\n"
		return

	print "\n[*] Restricted Jump Address Finder [*]"
	print "[*] Follow @HackerOnTwoWheels [*]\n"
	options = sys.argv[1]
	if sys.argv[2] != "-f":
		print "[!] Wrong Input please use " + sys.argv[0] + " -h for help! [!]\n"
		return
	addrfile = sys.argv[3]
	if options == "-b":
		badcheck(addrfile)
	elif options == "-g":
		goodcheck(addrfile)
	elif options  == "-c":
		createAddrFile(addrfile)
	else:
		print "[!] Wrong Input please use " + sys.argv[0] + " -h for help! [!]\n"
		return
			
if __name__ == '__main__':
	main()
